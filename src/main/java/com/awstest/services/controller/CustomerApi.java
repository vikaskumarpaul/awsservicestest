/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.awstest.services.controller;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.awstest.services.model.ApiErrorResponse;
import com.awstest.services.model.CustomerCreationRequest;
import com.awstest.services.model.CustomerDetailsResponse;
import com.awstest.services.model.CustomerUpdateRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Validated
@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	@ApiOperation(value = "Add new Customer", nickname = "addCustomer", notes = "Add new customer which has admin role", tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "Customer Sucessfully Added"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ApiErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ApiErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ApiErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ApiErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/customer", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> addCustomer(
			@ApiParam(value = "enter the appropriate customer creation Request", required = true) @Valid @RequestBody CustomerCreationRequest customerCreationRequest) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Deletes a Customer", nickname = "deleteCustomerById", notes = "Deletes a Customer and underlying details", tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "Customer Deleted Sucessfully"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ApiErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ApiErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ApiErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ApiErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/customer/{customerId}", produces = { "application/json" }, method = RequestMethod.DELETE)
	default ResponseEntity<Void> deleteCustomerById(
			@ApiParam(value = "ID of customer to return", required = true) @PathVariable("customerId") Long customerId) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Find customer by ID", nickname = "getCustomerById", notes = "Returns a single customer", response = CustomerDetailsResponse.class, tags = {
			"customer", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Customer Details Fetched Successfully", response = CustomerDetailsResponse.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ApiErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ApiErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ApiErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ApiErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/customer/{customerId}", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<CustomerDetailsResponse> getCustomerById(
			@ApiParam(value = "ID of customer to return", required = true) @PathVariable("customerId") Long customerId) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"hsmUserId\" : [ null, null ],  \"customerUUID\" : [ null, null ],  \"contactEmail\" : [ null, null ],  \"contactName\" : [ null, null ],  \"companyName\" : [ null, null ],  \"contactNumber\" : [ null, null ],  \"publicKeyConfirmed\" : [ null, null ],  \"id\" : 0,  \"type\" : [ null, null ]}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Update an existing customer", nickname = "updateCustomer", notes = "Update an existing known customer", tags = {
			"customer", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "Customer Sucessfully Updated"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ApiErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ApiErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ApiErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ApiErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/customer", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<Void> updateCustomer(
			@ApiParam(value = "customer update request", required = true) @Valid @RequestBody CustomerUpdateRequest customerUpdateRequest) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

}
